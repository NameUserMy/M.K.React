/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 Ball8v3.glb
*/
import { usePlane, useSphere } from '@react-three/cannon';
import React, { useEffect, useRef, useState } from 'react';
import { Decal, useGLTF, useHelper } from '@react-three/drei';
import { useFrame, useLoader } from '@react-three/fiber';
import { TextureLoader } from 'three/src/loaders/TextureLoader';








const Plane33 = (props) => {
  const [ref] = usePlane(() => ({ rotation: [-Math.PI / 2, 0, 0], position: [0, 0.83, 0] }));
  return (
    <mesh ref={ref}>
      <planeGeometry args={[0.78, 0.78, 20, 20]} />
      < meshStandardMaterial />
    </mesh>
  )
};


function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

export default function Model4(props) {

  const answerTex=useLoader(TextureLoader,["Yes.png","No.png","m.png"]);
  const answer = useRef();
 
  const [answerAnim, setAnswer] = useState(false);
  const [answerDown, setDown] = useState(true);
  const [answerUp, setUp] = useState(false);
  const [answerView,setAnswerView]=useState(0);

  useFrame((state, delta) => {
    if (answerAnim) {

      if (answerDown) {
        answer.current.position.y -= delta * 0.3;
        answer.current.rotation.y -= Math.PI / 500;

        if (answer.current.position.y <= -0.25) {


          setDown(false);
          setUp(true);
        }

      }

      if (answerUp) {
        answer.current.position.y += delta * 0.3;
        if (answer.current.position.y >= 0) {


          setAnswer(false);
          setUp(false);
          setDown(true);


        }

      }

    }
  })

  useEffect(()=>{

    if(answer){
      setAnswerView(getRandomInt(3)); 
    }

  },[answerView,answerUp])

  const { nodes, materials } = useGLTF('/Ball8v3.glb')
 
  return (
    <group {...props} dispose={null}>
      <group ref={answer} onClick={() => { setAnswer(!answerAnim); }} >
        <mesh geometry={nodes.Cone.geometry} material={nodes.Cone.material} position={[0, 0.378, -0.2]} rotation={[0.84, 0, 0]} scale={[-0.31, -0.393, -0.331]} >
          <Decal 
           //debug
           position={[0,-1,0]}
           rotation={[3.5,0.0,0]}
           scale={[2,2,2]}
           polygonOffset
           polygonOffsetFactor={-1}

          >
          <meshStandardMaterial map={answerTex[answerView]}  />
          </Decal>
          
        </mesh>
      </group>
      <mesh >
        <Plane33 />
      </mesh>
      <mesh geometry={nodes.Cylinder.geometry} material={materials.water} position={[0, 0.89, 0]} rotation={[-Math.PI, 0, 0]} scale={[0.5, 0.05, 0.5]} >
        <ambientLight intensity={2} />
      </mesh>

      <mesh geometry={nodes.Sphere001.geometry} material={materials['uv text patern']} >
        <ambientLight intensity={1} />
        <spotLight   position={[1,4,0]} intensity={60} castShadow /> 
        {/* <meshStandardMaterial wireframe /> */}
      </mesh>
      <mesh geometry={nodes.Sphere001_1.geometry} material={materials.Glass} >
        <directionalLight />
        <directionalLight position={[3, 0, 6]} intensity={6} castShadow />
      </mesh>
    </group>
  )
}
useGLTF.preload('/Ball8v3.glb')
